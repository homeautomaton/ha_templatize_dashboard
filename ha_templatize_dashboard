#!/usr/local/bin/python3
import argparse
import textwrap
import yaml
import json

known = {}
used = {}
included = {}
not_found = {}
group = 'unknown'
prior_include = 'unknown'
level = 0

#### pip3 install PyYAML first.

#### For instructions:
####     ha_templatize_dashboard --help

def check_include_froms( elem ):
    if type( elem ) == type( {} ):
        if 'included-from' in elem:
            return True
        for k in elem:
            if check_include_froms( elem[k] ):
                return True
    elif type( elem ) == type( [] ):
        for e in elem:
            if check_include_froms( e ):
                return True
    return False
    
    
def process( operation, args, elem, reprocessing ):
    global used
    global not_found
    global known
    global group
    global level
    global prior_include

    if level < 5: group = 'unknown'

    if type( elem ) == type( {} ):
        result = {}
        etype = elem.get('type')
        etitle = elem.get('title')

        if 'title' in elem:
            group = etitle

        if operation == 'record' and args.template_file:
           elem[ 'included-from' ] = group

        if operation == 'record' and etype == 'entities':
            if group not in known: known[ group ] = [ ]
            known[ group ] += [ elem ]
            return {}

        if operation == 'carve':
            if reprocessing:
                if 'included-from' in elem:
                    if elem[ 'included-from' ] != prior_include:
                        prior_include = elem[ 'included-from' ]
                        return( { 'include' : elem[ 'included-from' ] } )
                    else:
                        return( None )
            else:
                if group in known:
                    if etype in ( 'entities' ):
                        if group not in included:
                            included[ group ] = 1
                            return( { 'include' : group } )
                        else:
                            return( None )
                    if type( elem ) == type( {} ) and 'entity' in elem and group != 'unknown':
                        return( None )

        for k in elem:
            if operation == 'record' and k == 'entity':
                if group not in known: known[ group ] = [ ]
                known[ group ] += [ elem ]
                next
            if operation == 'include' and k == 'include':
                tag = elem[ k ]
                if tag in known:
                    used[ tag ] = True
                    result = known[ tag ]
                    break
                else:
                    not_found[ tag ] = True
                    result[ 'include' ] = tag
            else:
                level += 1
                node = process( operation, args, elem[k], reprocessing )
                level -= 1
                if type( node ) == type( {} ) and 'include' in node:
                    result[ 'include' ] = node[ 'include' ]
                else:
                    result[ k ] = node

    elif type( elem ) == type( [] ):
        result = []
        for e in elem:
            level += 1
            node = process( operation, args, e, reprocessing )
            level -= 1
            if node:
                if type( node ) == type( [] ):
                    result += node
                else:
                    result += [ node ]
    else:
        result = elem

    return result

def output( args, doc ):
    if args.json:
        print( json.dumps( doc, indent=2 ) )
    else:
        print( yaml.dump( doc ) )

def main( ):
    p = argparse.ArgumentParser(
      description='yaml templating tool for Home Assistant',
      formatter_class=argparse.RawDescriptionHelpFormatter,
      epilog=textwrap.dedent( '''\
        Typical usage:
            (1) Choose an existing dashboard in home assistant which you already have edited, or create 
            a new one with all of your entities (the default).  (You can choose your "Overview" dashboard,
            but realize in step 2 you will be editing it.)

            (2) Edit your chosen dashboard to get the complete yaml text of the generated Overview dashboard, 
            and use copy/paste to store it in a file, like overview.yaml.

            (3) Then, create a template file, using
            $ ha_templatize_dashboard -f overview.yaml -s >template.yaml

            (4) Edit template.yaml to arrange rooms and add any additional formatting.

            (5) Generate a new dashboard, combining original overview.yaml and template.yaml:
            $ ha_templatize_dashboard -f overview.yaml -t template.yaml >new-overview.yaml

            Notes:
            You may not want to re-run step 3 on subsequent generations, after you have made modifications to your
            template. This will keep your previous edits and allow you to discover new entities added to exising rooms. 
            New rooms won't automatically appear in your template but they are easy to add.

            Also, if you do no editing in step 2, then you will just get the default ordering of rooms and
            still be able to use the process (skipping step 3) to discover new entities.

            To find any new rooms, or debug issues with missing "include"s, use -v during step 5 to generate
            comments at the end of the .yaml output.
         ''' ) )

    p.add_argument( '-f', '--file', help='input "Overview" yaml' )
    op_g = p.add_argument_group('operation selectors')
    op_g_mut = op_g.add_mutually_exclusive_group()
    op_g_mut.add_argument( '-s', '--output-template', action='store_true', help='generate a template file matching the existing overview.yaml input' )
    op_g_mut.add_argument( '-t', '--template-file', help='template file to be expanded' )
    p.add_argument( '-J', '--json', action='store_true', help='show hierarcy as JSON' )
    p.add_argument( '-v', '--verbose', action='store_true', help='give verbose output' )

    args = p.parse_args( )

    if not args.file:
        p.error( "--file is required" )
        return
 
    with open( args.file, 'r' ) as file:
        doc = yaml.safe_load( file )
    was_generated = check_include_froms( doc )
    process( 'record', args, doc, was_generated )
    if args.output_template:
        newdoc = process( 'carve', args, doc, was_generated )
        output( args, newdoc )
    elif args.template_file:
        with open( args.template_file, 'r' ) as file:
            template = yaml.safe_load( file )
        newdoc = process( 'include', args, template, was_generated )
        output( args, newdoc ) 
        if args.verbose:
            for i in known:
                if i not in used:
                    print('# not used: ' + i )
            for i in not_found:
                print('# not found: ' + i )
    else:
        output( args, doc )

if __name__ == '__main__':
    main( )
